[basic]
graph_dir = CONTENT1
save_dir = CONTENT2
raw_dir = CONTENT3
dataset_name = CONTENT4
;______________pyg_version __________ pyg ______1.7.2
pyg_version =
;choices = ['h5', 'npz']
interface = h5
;choices = ['hamiltonian', 'density_matrix', 'O_ij', 'E_ij']
target = hamiltonian
disable_cuda = True
device = cuda:0
; -1 for cpu_count() // 16
num_threads = 64
save_to_time_folder = False
save_csv = False
tb_writer = True
seed = 42
;multiprocessing to get crystal graph
multiprocessing = False
;[{"N1 N2": [a1, a2], "N3 N4": [a3, a4], "N5 N6": [a5, a6]}, {"N7 N8": [a7, a8]}] : to predict 2 matrix elements H1 and H2,
;where H1 = H_{i a1, j a2} (when the atomic number of atom i is N1 and the atomic number of atom j is N2)
;H1 = H_{i a3, j a4} (when the atomic number of atom i is N3 and the atomic number of atom j is N4)
;H1 = H_{i a5, j a6} (when the atomic number of atom i is N5 and the atomic number of atom j is N6)
;H2 = H_{i a7, j a8} (when the atomic number of atom i is N7 and the atomic number of atom j is N8)
orbital = []
;choices = ['H_minimum', 'H_minimum_withNA', 'H', 'Rho']
O_component = H
;choices = ['xc', 'delta_ee', 'both', 'summation']
energy_component = summation
max_element = -1
statistics = False
normalizer = False
boxcox = False

[graph]
radius = -1.0
max_num_nbr = 0
create_from_DFT = True
if_lcmp_graph = True
separate_onsite = False

[train]
epochs = 0
pretrained =
resume =
train_ratio = 0.6
val_ratio = 0.2
test_ratio = 0.2
early_stopping_loss = 0.000000
early_stopping_loss_epoch = [0.000000, 500]
revert_then_decay = True
revert_decay_epoch = [150, 2000, 8000]
revert_decay_gamma = [0.2, 0.5, 0.5]
clip_grad = True
clip_grad_value = 4.2
switch_sgd = False
switch_sgd_lr = 1e-4
switch_sgd_epoch = -1

[hyperparameter]
batch_size = 1
dtype = float32
;choices = ['sgd', 'sgdm', 'adam', 'lbfgs']
optimizer = adam
;initial learning rate
learning_rate = 0.001
;choices = ['', 'MultiStepLR', 'ReduceLROnPlateau', 'CyclicLR']
lr_scheduler =
lr_milestones = []
momentum = 0.9
weight_decay = 0
criterion = MaskMSELoss
retain_edge_fea = True
lambda_Eij = 0.0
lambda_Ei = 0.1
lambda_Etot = 0.0

[network]
atom_fea_len = 64
edge_fea_len = 128
gauss_stop = 9.0
;The number of angular quantum numbers that spherical harmonic functions have
num_l = 5
aggr = add
distance_expansion = GaussianBasis
if_exp = True
if_MultipleLinear = False
if_edge_update = True
if_lcmp = True
normalization = LayerNorm
;choices = ['CGConv', 'GAT', 'PAINN']
atom_update_net = CGConv
